name: Build & publish module to registry
on:
  release:
    types: [published]

# This regex matches either a semver (e.g. 1.2.3)
# or a release candidate in one of these forms:
# 1.2.3-rc or 1.2.3-rc1
# Adjust the regex below as needed.
# The pattern:
#   ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]*)?$ 
# matches to
#    [0-9]+.[0-9]+.[0-9]+
# or [0-9]+.[0-9]+.[0-9]+-rc optionally followed by digits

jobs:
  validate-tag:
    runs-on: ubuntu-22.04
    steps:
      - name: Validate tag format
        run: |
          TAG="${{ github.event.release.tag_name }}"
          echo "Validating tag: $TAG"
          if [[ $TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]*)?$ ]]; then
            echo "Tag matches semver."
          else
            echo "Error: tag does not match semver"
            exit 1
          fi

  # If we use the viamrobotics/build-action@v1, it farms out compilation to Linux machines no
  # matter which OS you're targeting (which is fine for Go and Python, but not for C++).
  # Furthermore, these Linux machines do not cache build artifacts from one run to another. So
  # instead, we're going to build everything on Github's action runners directly.
  build:
    name: Build the module
    needs: validate-tag
    strategy:
      matrix:
        build_target:
          - runs_on: ubuntu-22.04
            cache_dir: ~/.conan2
          - runs_on: ubuntu-22.04-arm
            cache_dir: ~/.conan2
          - runs_on: macos-14
            cache_dir: ~/.conan2
          - runs_on: macos-13
            cache_dir: ~/.conan2
          - runs_on: windows-2019
            cache_dir: C:\Users\runneradmin\.conan2
    runs-on: ${{ matrix.build_target.runs_on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore cached libraries
        uses: actions/cache@v3
        with:
          path: ${{ matrix.build_target.cache_dir }}
          key: ${{ matrix.build_target.runs_on }}-conan-${{ hashFiles('**/conanfile.py') }}
          restore-keys: |
            ${{ matrix.build_target.runs_on }}-conan-
      - name: Setup and build
        run: |
          make setup
          make module.tar.gz
      # As of April 2025, there isn't an obvious way to upload to the Viam module registry from
      # Windows. So, we upload to the Github Actions artifacts, then download it on Linux in a later
      # step to upload to the module registry.
      - name: Store the module as a temporary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_target.runs_on }}-module-${{ github.sha }}
          path: ./module.tar.gz

  publish:
    name: Upload module
    needs: build
    strategy:
      matrix:
        build_target:
          - platform: linux/amd64
            built_on: ubuntu-22.04
          - platform: linux/arm64
            built_on: ubuntu-22.04-arm
          - platform: darwin/arm64
            built_on: macos-14
          - platform: darwin/amd64
            built_on: macos-13
          - platform: windows/amd64
            built_on: windows-2019
    runs-on: ubuntu-latest
    steps:
      - name: Install Viam CLI
        run: |
          sudo curl -o /usr/local/bin/viam https://storage.googleapis.com/packages.viam.com/apps/viam-cli/viam-cli-stable-linux-amd64
          sudo chmod a+rx /usr/local/bin/viam
      - name: Download the build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.build_target.built_on }}-module-${{ github.sha }}
          path: .
      - name: Publish build to Viam registry
        run: |
          viam login api-key --key-id ${{ secrets.viam_key_id }} --key ${{ secrets.viam_key_value }}
          viam module upload --platform ${{ matrix.build_target.platform }} --version ${{ github.ref_name }} --upload module.tar.gz
