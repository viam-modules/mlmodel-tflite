name: Build & publish module to registry

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# This regex matches either a semver (e.g. 1.2.3)
# or a release candidate in one of these forms:
# 1.2.3-rc or 1.2.3-rc1
# Adjust the regex below as needed.
# The pattern:
#   ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]*)?$ 
# matches to
#    [0-9]+.[0-9]+.[0-9]+
# or [0-9]+.[0-9]+.[0-9]+-rc optionally followed by digits

jobs:
  # If we use the viamrobotics/build-action@v1, it farms out compilation to Linux machines no
  # matter which OS you're targeting. Furthermore, these Linux machines do not cache temporary
  # files from one run to another. So instead, we're going to build everything on Github's action
  # runners directly.
  build-windows:
    name: Build for Windows
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v4
    - name: Restore cached libraries
      uses: actions/cache@v3
      with:
        path: ${{ env.USERPROFILE }}\.conan2
        key: ${{ runner.os }}-windows2019-conan-${{ hashFiles('**/conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-windows2019-conan-
    - name: setup-and-module
      run: |
        make setup
        make module.tar.gz
    # As of April 2025, there isn't an obvious way to upload to the Viam module registry from
    # Windows. So, we upload to the Github Actions artifacts, then download it on Linux in a later
    # step to upload to the module registry.
    - name: upload-module
      uses: actions/upload-artifact@v4
      with:
        name: windows-2019-module-${{ github.sha }}
        path: ./module.tar.gz

  build-unix:
    name: Build for Unix
    strategy:
      matrix:
        build_target:
          - platform: linux/arm64
            runs_on: ubuntu-latest
          - platform: linux/amd64
            runs_on: ubuntu-24.04-arm
          - platform: darwin/arm64
            runs_on: macos-latest
          - platform: darwin/amd64
            runs_on: macos-13
    runs-on: ${{ matrix.build_target.runs_on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore cached libraries
        uses: actions/cache@v3
        with:
          path: ~/.conan2
          key: ${{ runner.os }}-${{ matrix.build_target.runs_on }}-conan-${{ hashFiles('**/conanfile.py') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.build_target.runs_on }}-conan-
      - name: Setup and build
        run: |
          make setup
          make module.tar.gz
      - name: Store module temporarily
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build_target.runs_on }}-module-${{ github.sha }}
          path: ./module.tar.gz

  publish:
    name: Build and Upload module
    needs: [build-windows, build-unix]
    strategy:
      matrix:
        build_target:
          - platform: linux/amd64
            runs_on: ubuntu-latest
          - platform: linux/arm64
            runs_on: ubuntu-24.04-arm
          - platform: darwin/arm64
            runs_on: macos-latest
          - platform: darwin/amd64
            runs_on: macos-13
          - platform: windows/amd64
            runs_on: windows-2019
    runs-on: ubuntu-latest
    steps:
      - name: Install Viam CLI
        run: |
          sudo curl -o /usr/local/bin/viam https://storage.googleapis.com/packages.viam.com/apps/viam-cli/viam-cli-stable-linux-amd64
          sudo chmod a+rx /usr/local/bin/viam
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.build_target.runs_on }}-module-${{ github.sha }}
          path: ./module.tar.gz
      - name: Publish build to Viam registry
        run: |
          viam login api-key --key-id ${{ secrets.viam_key_id }} --key ${{ secrets.viam_key_value }}
          #viam module upload --platform ${{ matrix.build_target.platform }} --version ${{ github.ref_name }} --upload module.tar.gz
          ls -lah .
